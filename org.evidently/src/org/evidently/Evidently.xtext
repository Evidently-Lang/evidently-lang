grammar org.evidently.Evidently with org.eclipse.xtext.xbase.Xbase //with org.eclipse.xtext.xbase.Xtype
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as jvmTypes
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

/**
 * Removing left recursion (general rule)
 * A -> A a | b
 * by:
 * A -> b A'
 * A'-> aA' | (empty)
 */

generate evidently "http://www.evidently.org/Evidently"

PolicyFile:
	(elements+=FileElem)*
	;

ProgId: ID;

EvidentlyId: 
	ID ('.' ID)*
;

BooleanLiteral:
	"true" | "false"
;

ProgType:
	 {ProgType} "byte" ProgTypePrime
	| {ProgType} "short"  ProgTypePrime 
	| {ProgType} "int"  ProgTypePrime
	| {ProgType} "long"  ProgTypePrime
 	| {ProgType} "float"  ProgTypePrime
 	| {ProgType} "double"  ProgTypePrime
 	| {ProgType} "char"  ProgTypePrime
 	| {ProgType} "boolean" ProgTypePrime
 	| {ProgType} "void"
	| javaType=[jvmTypes::JvmType|QualifiedName] ProgTypePrime // takes the place of ProgId rules.
;

ProgTypePrime:
	("[" "]" ProgTypePrime)?
;


//terminal INT: 
//    ('0'..'9')+;

		
FileElem:
	ImportLevels
	| Policy 
	| Model
	| Levels
;
	
ImportLevels:
	'using' 'levels' name=ID
;	

Policy:
	'policy' name=ID '{' 
		(elements+=PoBElem)*	
	'}'
	| 
	'policy' name=ID params=GParams '{' 
		(elements+=PoBElem)*	
	'}'
	
;	

GParams:
	'<' params+=ID (',' params+=ID)*  '>'
;

PoBElem:
	Use
	| Release
	| EnforceDirective 
;

Use:
	UsePolicy
	| UseElem
;	


UsePolicy:
	'use' 'policy' name=ID ';'
	| 'use' 'policy' name=ID 'as' alias=ID ';'
	| 'use' 'policy' name=ID args=GArgs ';'
	| 'use' 'policy' name=ID args=GArgs 'as' alias=ID ';'
;	

GArgs:
	"<" args+=GenericArg (',' args+=GenericArg)* ">"
;

GenericArg:
	name=ID
	| '*' name="*"
	| "{" names+=ID (',' names+=ID)*
;


UseElem:
	'use' kind=UseKind name=ID ';'
	| 'use' kind=UseKind name=ID 'as' alias=ID ';'
;	

UseKind:  
	'model' 
;



Release:
	'release' '(' what=EvidentlyId ',' flow=LevelFlow  ')'  '=' '{' (releases+=RTime)* '}'
	| 'release' '(' what=EvidentlyId ',' flow=LevelFlow  ')' ';' 	
	| 'release' '(' '*' what='*' ',' flow=LevelFlow  ')' ';' 
	 
;

LevelFlow:
	from=GenericArg "->" to=GenericArg
;	

RTime:
	'when' '{' condition=XExpression '}'
	| 'unless' '{' notCondition=XExpression '}'
	
;

Exp:
	'a' name='a'
;

//Exp returns XExpression:	
//;

//ExpDiv returns Expression:
//  ExpMod ({ExpDiv.left=current} '/' right=ExpMod)*;
//
//ExpApp returns Expression:
//  ExpPlus ({ExpMod.left=current} '%' right=ExpPlus)*
//;
////
//ExpDiv returns Expression:
//  ExpMod ({ExpDiv.left=current} '/' right=ExpMod)*;
//
//ExpMod returns Expression:
//  ExpPlus ({ExpMod.left=current} '%' right=ExpPlus)*
//;
////
//ExpPlus returns Expression:
//  ExpMinus ({ExpPlus.left=current} '+' right=ExpMinus)*;
//
//ExpMinus returns Expression:
//  ExpLt ({ExpMinus.left=current} '-' right=ExpLt)*
//;
////
//ExpLt returns Expression:
//  ExpLeq ({ExpLt.left=current} '<' right=ExpLeq)*;
//
//ExpLeq returns Expression:
//  ExpGt ({ExpLeq.left=current} '<=' right=ExpGt)*
//;
////
//ExpGt returns Expression:
//  ExpGeq ({ExpGt.left=current} '>' right=ExpGeq)*;
//
//ExpGeq returns Expression:
//  ExpEq ({ExpGeq.left=current} '>=' right=ExpEq)*
//;
////
//ExpEq returns Expression:
//  ExpNeq ({ExpEq.left=current} '==' right=ExpNeq)*;
//
//ExpNeq returns Expression:
//  ExpAnd ({ExpNeq.left=current} '!=' right=ExpAnd)*
//;
/////
//ExpAnd returns Expression:
//  ExpOr ({ExpAnd.left=current} '&&' right=ExpOr)*;
//
//ExpOr returns Expression:
//  ExpBase ({ExpOr.left=current} '||' right=ExpBase)*
//;
/////
//
//// non left recursive rules 
//ExpBase returns Expression:
//	INT | STRING | BooleanLiteral | EvidentlyId // simple terminals
//	'(' ExpAnd ')' // change to top level one.
//	
//;
	
EnforceDirective:
	'enforce' mode=EnforceMode policy=ID	
;	

EnforceMode:
	'static' | 'runtime'
;



Model:
	'model' name=ID '{' (elements+=MBElem)* '}'
;	

MBElem: 
	Use 
	| Flowpoints
	| Property
;


Flowpoints:
	'flowpoints' name=ID ':' type=ProgType '=' '{' body=EvBody '}'
	| 'flowpoints' name=ID '{' body=EvBody '}'
;

// this looks wrong but it's right. 
EvBody : EvExp;
EvExp : EvAnd;
EvAnd returns EvExpression:
  EvOr ({EvAnd.left=current} '&&' right=EvOr)*;

EvOr returns EvExpression:
  EvExpBase ({EvOr.left=current} '||' right=EvExpBase)*;

EvExpBase returns EvExpression:
  '(' EvAnd ')'
  | predicate=EvPredExtended '(' description=MethDescs ')'
  | predicate=EvScopePred '(' name=EvidentlyId ')'
  | '!' EvAnd
  ;
  




/* 
Removing left recursion (general rule)
 * A -> A a | b
 * by:
 * A -> b A'
 * A'-> aA' | (empty)
 */
EvPredExtended : 'execution' | 'resultof' | 'this'  | 'cflow';
EvScopePred    : 'within'    | 'typeof'   | 'named' | 'field';

MethDescs:
	elements+=MethDesc (',' elements+=MethDesc)* 
;

MethDesc:
	name=IdOrStar
	| name=IdOrStar '(' signature=(MethFormalDescs)? ')'
	| type=TypeOrStar name=IdOrStar'(' signature=(MethFormalDescs)? ')'
	;

IdOrStar: 
	EvidentlyId 
	| '*'
;
TypeOrStar: 
	{TypeOrStar} '*' 
	| ProgType
;

MethFormalDescs:
	desc='...'
	| descs+=TypeOrStar (',' descs+=TypeOrStar)*
;

Property:
	'property' name=ID (':' type=ProgType)? (spec=Specification)? '{' expression=XExpression '}'
	| 'property' name=ID formals=PFormals (':' type=ProgType)? (spec=Specification)? '{' expression=XExpression '}'
			
;

//EqSpec :
//	{EqSpec} (spec+=Specification)*
//;

Specification:
	{Specification} (requires+=Requires)+ (assignable+=Assignable)* (ensures+=Ensures)+
	| {Specification} (assignable+=Assignable)+ (ensures+=Ensures)+
	| {Specification} (ensures+=Ensures)+
;


Requires: 
	'requires' expression=XExpression ';'
;
Assignable: 
	'assignable' expression=XExpression ';'
;
Ensures: 
	'ensures' expression=XExpression ';'
;

PropBody : 
	'a' name='a'
;

PFormals:
	{PFormals} '('  (args=Formals)? ')' 
;

Formals:
	elements+=Formal (',' elements+=Formal)*
;

Formal:
	{Formal} name=ID
	| {Formal} name=ID ':' type=ProgType
;


Levels:
	'levels' name=ID '{' (elements+=LevElem)* '}'
;	

LevElem:
	kind=LevelKind '{' elements=(LevelBodyElems)? '}'
;

LevelKind:
	'sink' | 'source' | 'both'
;

LevelBodyElems:
	elements+=LevelBodyElem (',' elements+=LevelBodyElem)*
;
LevelBodyElem:
	name=ID
;